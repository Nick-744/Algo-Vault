- Τίτλος:
1. Maximum Sub-array Πρόβλημα (2023-24)

- Περιγραφή:
Για ένα πίνακα τυχαίων ακεραίων αριθμών (θετικών, αρνητικών ή μηδέν)
ζητείται η υλοποίηση αλγορίθμων εύρεσης του υπο-πίνακα
(συνεχόμενες τιμές) που το άθροισμα των στοιχείων του είναι μέγιστο.

Απαιτείται να προσδιορισθεί η τιμή του αθροίσματος καθώς και
οι θέσεις στον αρχικό πίνακα από όπου ξεκινά και σταματά ο υπο-πίνακας.

πιο αναλυτικά στη wikipedia
https://en.wikipedia.org/wiki/Maximum_subarray_problem

Να υλοποιηθούν τέσσερις (4) αλγόριθμοι επίλυσης του προβλήματος.
ο πρώτος πολυπλοκότητας Ο(n^3),
ο δεύτερος πολυπλοκότητας Ο(n^2),
ο τρίτος πολυπλοκότητας Ο(nlogn) και
ο τέταρτος πολυπλοκότητας Ο(n).

Δημιουργείστε για κάθε αλγόριθμο, ένα σετ δεδομένων που να περιέχει δύο (2) ή
περισσότερους πίνακες διαφόρων μεγεθών, με τυχαίους ακέραιους αριθμούς στο διάστημα -100 έως 100.
Τα μεγέθη των πινάκων να είναι ανάλογα με την πολυπλοκότητα του αλγόριθμου,
ώστε ο χρόνος εκτέλεσης των αλγορίθμων να είναι της τάξης των δευτερολέπτων.

- Ζητείται:
1. Να εκτελέσετε τους αλγόριθμους για τα δεδομένα που δημιουργήθηκαν
και να καταγράψετε τους χρόνους εκτέλεσης.
Σε μια αναφορά να περιγράψετε συνοπτικά την όλη διαδικασία και να σχολιάσετε
τον τρόπο μεταβολής των χρόνων εκτέλεσης των αλγορίθμων στο σετ δεδομένων,
σε σχέση με το μέγεθος του προβλήματος την κατηγορία πολυπλοκότητας του αλγόριθμου.
2. Να βρείτε για κάθε αλγόριθμο, το μέγιστο μέγεθος του προβλήματος
που μπορεί να επιλυθεί σε χρόνο εκτέλεσης 3 sec.

Παρατηρήσεις:
Στον χρόνο εύρεσης της λύσης ΔΕΝ πρέπει να περιέχεται ο χρόνος δημιουργίας
των δεδομένων.

*********

- Τίτλος:
2. Εργασία αποθήκευσης & αναζήτησης δεδομένων με χρήση HASHING

- Περιγραφή:
Η εργασία έχει στόχο την υλοποίηση μιας αποτελεσματικής λύσης σε ένα
πρόβλημα υπολογισμού συνολικών χρεώσεων σε κατόχους πιστωτικών καρτών.

Ακολουθούμε τα παρακάτω βήματα:

Δημιουργία λίστας 20.000 πιστωτικών καρτών με τυχαίους διαφορετικούς αριθμούς.
Κάθε αριθμός πιστωτικής κάρτας αποτελείται από 16 ψηφία και 3 παύλες
(δηλ. 1234-5678-9012-3456, 4 τετραψήφιοι αριθμοί με παύλες ενδιάμεσα).

Με δεδομένη την παραπάνω λίστα, με μια επαναληπτική διαδικασία δημιουργούνται
ένα εκατομμύριο (1.000.000) χρεώσεις σε τυχαία πιστωτική κάρτα και ποσό
πληρωμής ένας τυχαίος ακέραιος αριθμός από 5 μέχρι 500.
Επίσης επιλέγεται τυχαία μια ημέρα για κάθε χρέωση από Δευτέρα έως και Σάββατο.

Η αρχικοποίηση της γεννήτριας των τυχαίων αριθμών να γίνει με seed τον αριθμό μητρώου σας.

- Ζητείται να υλοποιήσετε ένα πρώτο αλγόριθμο όπου με τον πλέον αποτελεσματικό
τρόπο αποθηκεύει τα δεδομένα των χρεώσεων (ένα - ένα μόλις δημιουργούνται)
σε κατάλληλη δομή δεδομένων της γλώσσας προγραμματισμού που χρησιμοποιείτε,
και αφού ολοκληρωθεί η δημιουργία των χρεώσεων να προσδιορίζει
τα παρακάτω τέσσερα (4) ζητούμενα:
1. την κάρτα με το μεγαλύτερο συνολικό ποσό πληρωμών
2. την κάρτα με το μικρότερο συνολικό ποσό πληρωμών
3. την κάρτα με το μεγαλύτερο πλήθος συναλλαγών
4. την ημέρα με το μικρότερο πλήθος συναλλαγών

Στη συνέχεια για την αποθήκευση των δεδομένων, υλοποιήστε έναν δικό σας
πίνακα κατακερματισμού (hash table) με ανοικτή διευθυνσιοδότηση και
γραμμική διερεύνηση (open addressing με linear probing).

Ο πίνακας να ξεκινά με μέγεθος ίσο με ένα πρώτο αριθμό λίγο μεγαλύτερο από 100.
Αν o συντελεστής φόρτωσης (load factor) του πίνακα κατακερματισμού ξεπερνά το 70%
τότε το μέγεθός του να γίνεται ίσο με τον μικρότερο πρώτο αριθμό που είναι
διπλάσιος του προηγούμενου μεγέθους.
(π.χ. με αρχικό μέγεθος 101, μετά τον πρώτο διπλασιασμό το μέγεθος του πίνακα
κατακερματισμού θα είναι 211, στον επόμενο διπλασιασμό θα είναι 431 κ.ο.κ.).

- Ζητείται να υλοποιήσετε ένα δεύτερο αλγόριθμο που απαντά στα τέσσερα (4) ζητούμενα
με χρήση του δικού σας πίνακα κατακερματισμού.

Παρατήρηση: με χρήση του ίδιου seed στην γεννήτρια τυχαίων αριθμών πριν την
δημιουργία της λίστας των 20.000 πιστωτικών καρτών και πριν την εκτέλεση
του κάθε αλγόριθμου, οι 2 αλγόριθμοι πρέπει να δίνουν τα ίδια αποτελέσματα.

Τρέξτε ξανά τους 2 αλγόριθμους για 2.000.000, 5.000.000 χρεώσεις.

Εκτιμήστε την πολυπλοκότητα των 2 αλγορίθμων που υλοποιήσατε και επαληθεύστε
αυτή την εκτίμηση με βάση τους χρόνους εκτέλεσης των αλγορίθμων.

Συντάξτε μια μικρή αναφορά με τα αποτελέσματα και τα συμπεράσματα σας για την εργασία.

Ο κώδικας που θα παραδώσετε πρέπει να περιέχει τα απαραίτητα για την
κατανόησή του σχόλια και πριν από κάθε συνάρτηση (ή μέθοδο) να υπάρχει μια
σύντομη περιγραφή της λειτουργίας της.

*********

- Τίτλος:
3. Προσδιορισμός της τρέχουσας διάμεσης τιμής (running median problem)

- Περιγραφή:
Σε μια μεταλλική πλάκα διαστάσεων 1000 x 1000 μετρούνται οι τιμές της
θερμοκρασίας της σε διάφορα τα σημεία της και σε διάφορες χρονικές στιγμές.

Αρχικά δημιουργείται μια λίστα μεγέθους n=100.000 τυχαίων σημείων μέτρησης με
συντεταγμένες x και y.
Οι τιμές για τις συντεταγμένες των σημείων είναι τυχαίες ακέραιες τιμές
από 0 έως 999 για το x και το y.

Στη συνέχεια δημιουργούνται Ν το πλήθος μετρήσεις θερμοκρασιών για σημεία
που επιλέγονται με τυχαίο τρόπο από την παραπάνω λίστα.
Οι τιμές για τις θερμοκρασίες είναι τυχαίες τιμές από -10,00 έως 90,00.
(Οι τιμές των θερμοκρασιών έχουν ακρίβεια εκατοστού)

- Ζητείται να αναπτυχθεί αποδοτικός αλγόριθμος, πολυπλοκότητας O(Νlogn),
που θα προσδιορίζει διαρκώς την τρέχουσα διάμεση τιμή όλων των
θερμοκρασιών των σημείων της πλάκας, μετά από κάθε δημιουργία μιας μέτρησης.

Ο αλγόριθμος θα προσδιορίζει και θα εμφανίζει:
1. τη διάμεση τιμή της θερμοκρασίας, μετά την δημιουργία των μισών, Ν/2
μετρήσεων και την τελική διάμεση τιμή της θερμοκρασίας,
μετά την δημιουργία όλων των μετρήσεων
2. το τελικό μέγεθος των δομών δεδομένων όπου αποθηκεύονται τα δεδομένα

Επίσης να αναφέρεται ο χρόνος εκτέλεσης για πλήθος μετρήσεων
Ν=500.000 και Ν=1.000.000.
(Οι χρόνοι εκτέλεσης δεν πρέπει να ξεπερνούν τα 30 sec για υλοποίηση σε Python)

- Υπόδειξη:
να χρησιμοποιηθούν δύο δομές δεδομένων τύπου heap,
όπου στην πρώτη θα αποθηκεύονται τα σημεία της πλάκας με τις μεγαλύτερες
τιμές θερμοκρασιών και στην δεύτερη τα σημεία της πλάκας με τις
μικρότερες τιμές των θερμοκρασιών.
Το πλήθος των στοιχείων στα δύο heap δεν πρέπει να διαφέρουν
περισσότερο από 1, ώστε να είναι εύκολος ο υπολογισμός της  διάμεσης τιμής.
Επιπλέον οι δομές θα πρέπει να επιτρέπουν την αποτελεσματική αλλαγή μιας
οποιαδήποτε τιμής στο heap, αφού η τελευταία μέτρηση της θερμοκρασίας
ενός σημείου πρέπει να αντικαθιστά την προηγούμενη τιμή, δηλαδή κάθε σημείο
της πλάκας με την τιμή της θερμοκρασίας της τελευταίας μέτρησης
θα υπάρχει μόνο φορά σε ένα από τα δύο heap.

Η διάμεσος (median) είναι ο αριθμός που βρίσκεται ακριβώς στη μέση
μιας ομάδας αριθμών ταξινομημένων κατά μέγεθος, έτσι ώστε το 50% των
ταξινομημένων αριθμών να είναι πάνω από τη διάμεσο και το άλλο 50%
κάτω από τη διάμεσο.
Εάν το πλήθος των αριθμών είναι άρτιο τότε διάμεσος είναι ο
μέσος όρος των δύο αριθμών που είναι στη μέση.
https://en.wikipedia.org/wiki/Median